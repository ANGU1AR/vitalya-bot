const axios = require('axios');
const crypto = require('crypto');

class GigaChat {
    constructor() {
        this.baseURL = 'https://gigachat.devices.sberbank.ru';
        this.authURL = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
        this.accessToken = null;
        this.tokenExpires = 0;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.authKey = process.env.GIGACHAT_AUTH_KEY;
        this.clientId = process.env.GIGACHAT_CLIENT_ID;
        this.clientSecret = process.env.GIGACHAT_CLIENT_SECRET;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RqUID
    generateRqUID() {
        return crypto.randomUUID();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ access token
    async getAccessToken() {
        try {
            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if (this.accessToken && Date.now() < this.tokenExpires) {
                return this.accessToken;
            }

            const response = await axios.post(this.authURL, 
                new URLSearchParams({ scope: 'GIGACHAT_API_PERS' }),
                {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Accept': 'application/json',
                        'RqUID': this.generateRqUID(),
                        'Authorization': `Basic ${this.authKey}`
                    }
                }
            );

            this.accessToken = response.data.access_token;
            this.tokenExpires = Date.now() + (response.data.expires_in * 1000) - 60000; // -1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –∑–∞–ø–∞—Å
            
            console.log('‚úÖ GigaChat token –ø–æ–ª—É—á–µ–Ω');
            return this.accessToken;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GigaChat token:', error.response?.data || error.message);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat
    async sendMessage(message, chatHistory = []) {
        try {
            const token = await this.getAccessToken();
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            const messages = [
                ...chatHistory,
                {
                    role: 'user',
                    content: message
                }
            ];

            const response = await axios.post(
                `${this.baseURL}/api/v1/chat/completions`,
                {
                    model: 'GigaChat',
                    messages: messages,
                    temperature: 0.7,
                    top_p: 0.1,
                    n: 1,
                    stream: false,
                    max_tokens: 512,
                    repetition_penalty: 1.1
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'application/json'
                    }
                }
            );

            return response.data.choices[0].message.content;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat API:', error.response?.data || error.message);
            return "–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ —Ñ–æ—Ä–º–µ... ü§î";
        }
    }

    // –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    async learnFromChat(chatHistory) {
        try {
            const learningPrompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–∞—É—á–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ. 
–£—á—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è, –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–ª–æ–≤–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
–°—Ç–∞—Ä–∞–π—Å—è –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∏–ª—å –≤ –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
${JSON.stringify(chatHistory, null, 2)}

–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: 
`;
            
            return await this.sendMessage(learningPrompt, []);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
            return null;
        }
    }
}

module.exports = new GigaChat();