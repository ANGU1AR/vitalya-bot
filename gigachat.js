const axios = require('axios');
const crypto = require('crypto');
const https = require('https');

// –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π https agent –∫–æ—Ç–æ—Ä—ã–π –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç SSL –æ—à–∏–±–∫–∏
const customAgent = new https.Agent({
  rejectUnauthorized: false // –ò–ì–ù–û–†–ò–†–£–ï–ú SSL –û–®–ò–ë–ö–ò
});

class GigaChat {
    constructor() {
        this.baseURL = 'https://gigachat.devices.sberbank.ru';
        this.authURL = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
        this.accessToken = null;
        this.tokenExpires = 0;
        
        this.authKey = process.env.GIGACHAT_AUTH_KEY;
    }

    generateRqUID() {
        return crypto.randomUUID();
    }

    async getAccessToken() {
        try {
            if (this.accessToken && Date.now() < this.tokenExpires) {
                return this.accessToken;
            }

            const response = await axios.post(this.authURL, 
                new URLSearchParams({ scope: 'GIGACHAT_API_PERS' }),
                {
                    httpsAgent: customAgent, // –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ê–°–¢–û–ú–ù–´–ô AGENT
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Accept': 'application/json',
                        'RqUID': this.generateRqUID(),
                        'Authorization': `Basic ${this.authKey}`
                    }
                }
            );

            this.accessToken = response.data.access_token;
            this.tokenExpires = Date.now() + (response.data.expires_in * 1000) - 60000;
            
            console.log('‚úÖ GigaChat token –ø–æ–ª—É—á–µ–Ω');
            return this.accessToken;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GigaChat token:', error.message);
            return null;
        }
    }

    async sendMessage(message, chatHistory = []) {
        try {
            const token = await this.getAccessToken();
            if (!token) {
                return "–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ —Ñ–æ—Ä–º–µ... ü§î";
            }

            const messages = [
                ...chatHistory,
                {
                    role: 'user',
                    content: message
                }
            ];

            const response = await axios.post(
                `${this.baseURL}/api/v1/chat/completions`,
                {
                    model: 'GigaChat',
                    messages: messages,
                    temperature: 0.7,
                    top_p: 0.1,
                    n: 1,
                    stream: false,
                    max_tokens: 512,
                    repetition_penalty: 1.1
                },
                {
                    httpsAgent: customAgent, // –î–û–ë–ê–í–õ–Ø–ï–ú –ò –ó–î–ï–°–¨
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'application/json'
                    }
                }
            );

            return response.data.choices[0].message.content;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat API:', error.message);
            return "–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ —Ñ–æ—Ä–º–µ... ü§î";
        }
    }

    async learnFromChat(chatHistory) {
        try {
            const learningPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–∞—É—á–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ. –£—á—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è, –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏. –ò—Å—Ç–æ—Ä–∏—è: ${JSON.stringify(chatHistory)}`;
            return await this.sendMessage(learningPrompt, []);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
            return null;
        }
    }
}

module.exports = new GigaChat();