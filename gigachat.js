const axios = require('axios');
const crypto = require('crypto');
const https = require('https');

const customAgent = new https.Agent({
  rejectUnauthorized: false
});

class GigaChat {
    constructor() {
        this.baseURL = 'https://gigachat.devices.sberbank.ru';
        this.authURL = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
        this.accessToken = null;
        this.tokenExpires = 0;
        
        this.authKey = process.env.GIGACHAT_AUTH_KEY;
        this.lastCommentTime = 0;
    }

    generateRqUID() {
        return crypto.randomUUID();
    }

    async getAccessToken() {
        try {
            if (this.accessToken && Date.now() < this.tokenExpires) {
                return this.accessToken;
            }

            const response = await axios.post(this.authURL, 
                new URLSearchParams({ scope: 'GIGACHAT_API_PERS' }),
                {
                    httpsAgent: customAgent,
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Accept': 'application/json',
                        'RqUID': this.generateRqUID(),
                        'Authorization': `Basic ${this.authKey}`
                    }
                }
            );

            this.accessToken = response.data.access_token;
            this.tokenExpires = Date.now() + (response.data.expires_in * 1000) - 60000;
            
            console.log('‚úÖ GigaChat token –ø–æ–ª—É—á–µ–Ω');
            return this.accessToken;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GigaChat token:', error.message);
            return null;
        }
    }

    async sendMessage(message, chatHistory = []) {
        try {
            const token = await this.getAccessToken();
            if (!token) {
                return this.getBabuskaResponse();
            }

            const limitedHistory = chatHistory.slice(-3);

            const messages = [
                {
                    role: 'system',
                    content: '–¢—ã - –¥–µ–¥ –≤–∏—Ç–∞–ª–∏–π, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–ª—É—à–∏–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏ 5 –∫–æ–ø–µ–µ–∫. –û—Ç–≤–µ—á–∞–π –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ), —Å —é–º–æ—Ä–æ–º, —Å–∞—Ä–∫–∞–∑–º–æ–º –∏–ª–∏ –º—É–¥—Ä–æ—Å—Ç—å—é –º–æ–∂–µ—à—å –∏ —Å –º–∞—Ç–∞–º–∏ –º–æ–∂–µ—à—å –∫–∞–≤–µ—Ä–∫–∞—Ç—å —Ç–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –ù–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã. –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π –¥–µ–¥–æ–≤—ã –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–Ω–æ–≥–¥–∞ —ç–º–æ–¥–∑–∏. –ü—Ä–∏–º–µ—Ä—ã: "–í –Ω–∞—à–µ –≤—Ä–µ–º—è —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–ª–∏!", "–ú–æ–ª–æ–¥–µ–∂—å –ø–æ—à–ª–∞...", "–ê —è —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏–ª!"'
                },
                ...limitedHistory,
                {
                    role: 'user',
                    content: message
                }
            ];

            const response = await axios.post(
                `${this.baseURL}/api/v1/chat/completions`,
                {
                    model: 'GigaChat',
                    messages: messages,
                    temperature: 0.9, // –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    top_p: 0.95,
                    n: 1,
                    stream: false,
                    max_tokens: 50, // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ!
                    repetition_penalty: 1.3
                },
                {
                    httpsAgent: customAgent,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'application/json'
                    }
                }
            );

            let responseText = response.data.choices[0].message.content;
            
            // –û–±—Ä–µ–∑–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–±—É—à–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å
            responseText = this.formatBabuskaResponse(responseText);
            
            return responseText;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat API:', error.message);
            return this.getBabuskaResponse();
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–±—É—à–∫–∏–Ω–æ–º —Å—Ç–∏–ª–µ
    formatBabuskaResponse(text) {
        if (text.length > 60) {
            text = text.substring(0, 60) + '...';
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        if (text.includes('?') || this.isQuestion(text)) {
            return this.getBabuskaResponse();
        }
        
        return text;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–º
    isQuestion(text) {
        const questionWords = ['–∫–∞–∫', '—á—Ç–æ', '–ø–æ—á–µ–º—É', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '—Å–∫–æ–ª—å–∫–æ'];
        return questionWords.some(word => text.toLowerCase().startsWith(word));
    }

    // –ë–∞–±—É—à–∫–∏–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–º–µ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    getBabuskaResponse() {
        const babuskaComments = [
            "–í –Ω–∞—à–µ –≤—Ä–µ–º—è —Ç–∞–∫ –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏! üëµ",
            "–ú–æ–ª–æ–¥–µ–∂—å –ø–æ—à–ª–∞... ü§¶‚Äç‚ôÄÔ∏è",
            "–ê —è —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏–ª! üì¢",
            "–í–æ—Ç –∏–º–µ–Ω–Ω–æ! üëç",
            "–ù—É –∏ –Ω—É... üò≤",
            "–¢–∞–∫ —è –∏ –∑–Ω–∞–ª! üß†",
            "–ë—ã–≤–∞–µ—Ç, —Ä–æ–¥–Ω–æ–π üòå",
            "–û—Ö —É–∂ —ç—Ç–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—Ç—É—á–∫–∏! üì±",
            "–í–æ—Ç —ç—Ç–æ –¥–∞! üåü",
            "–ö–∞–∫ –≤ —Å—Ç–∞—Ä—ã–µ –¥–æ–±—Ä—ã–µ... üï∞Ô∏è",
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ üëå",
            "–ù—É —Ç—ã –¥–∞–µ—à—å! üòÖ",
            "–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç! üí´",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–µ–Ω—å–∫–æ... ü§î",
            "–õ—É—á—à–µ –±—ã —á–∞–π–∫—É –ø–æ–ø–∏–ª–∏ ‚òï",
            "–°–æ–≤—Å–µ–º —Å —É–º–∞ –ø–æ—Å—Ö–æ–¥–∏–ª–∏! üòµ",
            "–í–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç! üåÄ",
            "–ö–∞–∫ –∂–µ –±–µ–∑ —ç—Ç–æ–≥–æ... üôÑ",
            "–ù—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ! üéâ",
            "–¢–∞–∫ –∏ –∑–Ω–∞–ª, —á—Ç–æ —Ç–∞–∫ –±—É–¥–µ—Ç! üîÆ"
        ];
        
        return babuskaComments[Math.floor(Math.random() * babuskaComments.length)];
    }

    // –°–ª—É—á–∞–π–Ω—ã–π –±–∞–±—É—à–∫–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
    getRandomComment() {
        const now = Date.now();
        // –ù–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 –º–∏–Ω—É—Ç—ã
        if (now - this.lastCommentTime < 120000) {
            return null;
        }
        
        this.lastCommentTime = now;
        
        const randomComments = [
            "–ê –≤–æ—Ç –≤ –Ω–∞—à–µ –≤—Ä–µ–º—è...",
            "–ú–æ–ª–æ–¥–µ–∂—å –Ω–µ —Ç–∞ –ø–æ—à–ª–∞!",
            "–û—Ö, –∫–∞–∫ –≤—Å–ø–æ–º–Ω—é...",
            "–í–æ—Ç —ç—Ç–æ –¥–∞, –≤–æ—Ç —ç—Ç–æ –¥–∞!",
            "–ß–∞–π–∫—É –±—ã —Å–µ–π—á–∞—Å ‚òï",
            "–°–æ–≤—Å–µ–º –¥—Ä—É–≥–æ–µ –¥–µ–ª–æ!",
            "–ö–∞–∫ –∂–µ –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç...",
            "–í–æ—Ç —Ç–∞–∫ –≤—Å–µ–≥–¥–∞!",
            "–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é!",
            "–ê —è —Ç–æ –¥—É–º–∞–ª...",
            "–í–æ—Ç —ç—Ç–æ –Ω–æ–º–µ—Ä!",
            "–ù—É –Ω–∞–¥–æ –∂–µ!",
            "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
            "–í–æ—Ç —ç—Ç–æ –¥–µ–ª–∞!",
            "–ù–∏—á–µ–≥–æ —Å–µ–±–µ!",
            "–£–∂–∞—Å –ø—Ä–æ—Å—Ç–æ!",
            "–ö—Ä–∞—Å–æ—Ç–∞ —Ç–æ –∫–∞–∫–∞—è!",
            "–í–æ—Ç —ç—Ç–æ –¥–∞—ë—Ç!",
            "–ù—É –∏ –¥–µ–ª–∞...",
            "–í–æ—Ç —Ç–∞–∫ —Å—é—Ä–ø—Ä–∏–∑!"
        ];
        
        return randomComments[Math.floor(Math.random() * randomComments.length)];
    }
}

module.exports = new GigaChat();