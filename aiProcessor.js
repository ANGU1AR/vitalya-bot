const { getChatMemory } = require('./memoryManager');

function analyzeMessage(chatId, messageText) {
    try {
        const chatMemory = getChatMemory(chatId);
        const words = messageText.toLowerCase().split(/\s+/).filter(word => word.length > 2);
        
        words.forEach(word => {
            if (word && word.length > 1) {
                chatMemory.words.add(word);
            }
        });
        
        if (words.length > 2) {
            chatMemory.phrases.add(messageText);
        }
    } catch (error) {
        console.log("–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω:", error.message);
    }
}

function generateMixedPhrase(chatId) {
    try {
        const chatMemory = getChatMemory(chatId);
        
        if (chatMemory.words.size === 0) {
            return "–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ —Ñ–æ—Ä–º–µ... ü§î";
        }
        
        const words = Array.from(chatMemory.words);
        const phrases = Array.from(chatMemory.phrases);
        
        const simpleResponses = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üòé",
            "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ? üí¨",
            "–ö–∞–∫ –∂–∏–∑–Ω—å? üöÄ",
            "–û —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º? ü§î",
            "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! üåü",
            "–ß–µ–º –∑–∞–Ω—è—Ç? üí™",
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? üòä"
        ];
        
        return simpleResponses[Math.floor(Math.random() * simpleResponses.length)];
        
    } catch (error) {
        return "–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ —Ñ–æ—Ä–º–µ... ü§î";
    }
}

module.exports = { analyzeMessage, generateMixedPhrase };