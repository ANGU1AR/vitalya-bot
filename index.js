const { Telegraf } = require("telegraf");
const express = require('express');
const fs = require('fs').promises;
const path = require('path');

const telegramToken = process.env.TELEGRAM_TOKEN;
const bot = new Telegraf(telegramToken);
const app = express();
const PORT = process.env.PORT || 3000;

// üî• –ü–ê–ú–Ø–¢–¨ –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ß–ê–¢–ê
let chatMemories = {};
const memoryFile = path.join(__dirname, 'memory.json');

// üî• –ó–ê–ì–†–£–ó–ö–ê –ü–ê–ú–Ø–¢–ò
async function loadMemory() {
    try {
        const data = await fs.readFile(memoryFile, 'utf8');
        chatMemories = JSON.parse(data);
        console.log("üß† –ü–∞–º—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è —á–∞—Ç–æ–≤:", Object.keys(chatMemories));
    } catch (error) {
        chatMemories = {};
        console.log("üß† –ù–æ–≤–∞—è –ø–∞–º—è—Ç—å —Å–æ–∑–¥–∞–Ω–∞");
    }
}

// üî• –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò
async function saveMemory() {
    try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Set –≤ Array –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const memoriesToSave = {};
        for (const [chatId, memory] of Object.entries(chatMemories)) {
            memoriesToSave[chatId] = {
                words: Array.from(memory.words || []),
                phrases: Array.from(memory.phrases || []),
                photos: memory.photos || [],
                videos: memory.videos || [],
                stickers: memory.stickers || []
            };
        }
        await fs.writeFile(memoryFile, JSON.stringify(memoriesToSave, null, 2));
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏:", error);
    }
}

// üî• –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò –ß–ê–¢–ê
function getChatMemory(chatId) {
    if (!chatMemories[chatId]) {
        chatMemories[chatId] = {
            words: new Set(),
            phrases: new Set(),
            photos: [],
            videos: [],
            stickers: []
        };
    }
    return chatMemories[chatId];
}

// üî• –ü–†–û–í–ï–†–ö–ê –°–°–´–õ–û–ö
function isValidUrl(url, types) {
    try {
        const parsed = new URL(url);
        return parsed.protocol === 'https:' && 
               types.some(type => parsed.pathname.toLowerCase().endsWith(type));
    } catch {
        return false;
    }
}

// üî• –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ï–î–ò–ê
function addMediaToChat(chatId, url, mediaType) {
    const chatMemory = getChatMemory(chatId);
    const validTypes = {
        'photo': ['.jpg', '.jpeg', '.png', '.gif', '.webp'],
        'video': ['.mp4', '.mov', '.avi', '.webm'],
        'sticker': ['.webp', '.tgs']
    };

    if (isValidUrl(url, validTypes[mediaType]) && !chatMemory[mediaType + 's'].includes(url)) {
        chatMemory[mediaType + 's'].push(url);
        saveMemory();
        return true;
    }
    return false;
}

// üî• –û–¢–ü–†–ê–í–ö–ê –°–õ–£–ß–ê–ô–ù–û–ì–û –ú–ï–î–ò–ê (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–ê–ì)
let lastMediaIndexes = {};

async function sendRandomMedia(chatId, mediaType) {
    const chatMemory = getChatMemory(chatId);
    const mediaArray = chatMemory[mediaType + 's'];
    
    if (mediaArray.length === 0) {
        await bot.telegram.sendMessage(chatId, `–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç ${mediaType === 'photo' ? '—Ñ–æ—Ç–æ' : '–≤–∏–¥–µ–æ'}!`);
        return;
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ì–ê: —Ä–∞–∑–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
    const key = `${chatId}_${mediaType}`;
    if (!lastMediaIndexes[key]) lastMediaIndexes[key] = -1;
    
    lastMediaIndexes[key] = (lastMediaIndexes[key] + 1) % mediaArray.length;
    const mediaUrl = mediaArray[lastMediaIndexes[key]];

    try {
        if (mediaType === 'photo') {
            await bot.telegram.sendPhoto(chatId, mediaUrl, { caption: "üì∏ –î–µ—Ä–∂–∏—Ç–µ —Ñ–æ—Ç–æ!" });
        } else if (mediaType === 'video') {
            await bot.telegram.sendVideo(chatId, mediaUrl, { caption: "üé• –î–µ—Ä–∂–∏—Ç–µ –≤–∏–¥–µ–æ!" });
        } else if (mediaType === 'sticker') {
            await bot.telegram.sendSticker(chatId, mediaUrl);
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${mediaType}:`, error.message);
        await bot.telegram.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${mediaType} üòî`);
    }
}

// üî• –ê–ù–ê–õ–ò–ó –°–û–û–ë–©–ï–ù–ò–ô
function analyzeMessage(chatId, text) {
    const chatMemory = getChatMemory(chatId);
    const words = text.toLowerCase().split(/\s+/).filter(word => word.length > 2);
    const phrases = text.split(/[.!?]/).filter(phrase => phrase.trim().length > 3);
    
    words.forEach(word => chatMemory.words.add(word));
    phrases.forEach(phrase => chatMemory.phrases.add(phrase.trim()));
}

// üî• –ì–ï–ù–ï–†–ê–¢–û–† –§–†–ê–ó
function generateMixedPhrase(chatId) {
    const chatMemory = getChatMemory(chatId);
    if (chatMemory.words.size < 5) return null;
    
    const words = Array.from(chatMemory.words);
    const wordCount = 3 + Math.floor(Math.random() * 4);
    let newPhrase = [];
    
    for (let i = 0; i < wordCount; i++) {
        newPhrase.push(words[Math.floor(Math.random() * words.length)]);
    }
    
    let result = newPhrase.join(' ');
    result = result.charAt(0).toUpperCase() + result.slice(1);
    result += ['.', '!', '?', '...'][Math.floor(Math.random() * 4)];
    
    return result;
}

// üî• –¢–ê–ô–ú–ï–†–´
let isBotActive = false;
let photoTimer = null;
let lastActivityTime = Date.now();

function startTimers(chatId) {
    if (photoTimer) clearInterval(photoTimer);
    
    photoTimer = setInterval(async () => {
        if (isBotActive && Date.now() - lastActivityTime < 3600000) {
            const chatMemory = getChatMemory(chatId);
            const mediaTypes = [];
            if (chatMemory.photos.length > 0) mediaTypes.push('photo');
            if (chatMemory.videos.length > 0) mediaTypes.push('video');
            if (chatMemory.stickers.length > 0) mediaTypes.push('sticker');
            
            if (mediaTypes.length > 0 && Math.random() > 0.5) {
                const randomType = mediaTypes[Math.floor(Math.random() * mediaTypes.length)];
                await sendRandomMedia(chatId, randomType);
            }
        }
    }, 180000 + Math.floor(Math.random() * 3420000));
}

// üî• –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
const wakeUpPhrases = ["–ì—É–¥–µ–Ω—Ç–∞–∫! üòé –í–∏—Ç–∞–ª—è –Ω–∞ —Å–≤—è–∑–∏!", "–í–∏—Ç–∞–ª—è –≤ –∑–¥–∞–Ω–∏–∏! üí™", "–ü—Ä–æ—Å–Ω—É–ª—Å—è! üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"];
const sleepPhrases = ["–ê–π –º–ª—è! –ú–∞—Å–ª–∏–Ω—É –ø–æ–π–º–∞–ª! üòµ‚Äçüí´", "–í–∏—Ç–∞–ª—è —É—Ö–æ–¥–∏—Ç –≤ –∑–∞–∫–∞—Ç! üåÖ", "–û—Ç–∫–ª—é—á–∞—é—Å—å! üîå"];

bot.on("text", async (ctx) => {
    const chatId = ctx.chat.id;
    const messageText = ctx.message.text;
    const lowerText = messageText.toLowerCase();
    
    analyzeMessage(chatId, messageText);
    lastActivityTime = Date.now();
    
    // üî• –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
    if (lowerText.includes('–≤–∏—Ç–∞–ª—è –ø—Ä–æ—Å–Ω–∏—Å—å')) {
        if (!isBotActive) {
            isBotActive = true;
            const phrase = wakeUpPhrases[Math.floor(Math.random() * wakeUpPhrases.length)];
            await ctx.reply(phrase);
            startTimers(chatId);
        }
        return;
    }
    
    if (lowerText.includes('–≤–∏—Ç–∞–ª—è —É–π–¥–∏')) {
        if (isBotActive) {
            isBotActive = false;
            const phrase = sleepPhrases[Math.floor(Math.random() * sleepPhrases.length)];
            await ctx.reply(phrase);
            if (photoTimer) clearInterval(photoTimer);
            await saveMemory(); // üíæ –°–û–•–†–ê–ù–Ø–ï–ú –ü–ê–ú–Ø–¢–¨
        }
        return;
    }

    // üî• –ö–û–ú–ê–ù–î–´ –ú–ï–î–ò–ê
    if (lowerText === 'uwu' && isBotActive) {
        await sendRandomMedia(chatId, 'photo');
        return;
    }

    if (lowerText === '–≤–∏–¥–µ–æ' && isBotActive) {
        await sendRandomMedia(chatId, 'video');
        return;
    }

    if (lowerText === '—Å—Ç–∏–∫–µ—Ä' && isBotActive) {
        await sendRandomMedia(chatId, 'sticker');
        return;
    }

    if (lowerText.startsWith('–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ')) {
        const photoUrl = messageText.slice(13).trim();
        if (addMediaToChat(chatId, photoUrl, 'photo')) {
            await ctx.reply("üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!");
        } else {
            await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!");
        }
        return;
    }

    // üî• –û–ë–´–ß–ù–´–ï –û–¢–í–ï–¢–´
    if (isBotActive && Math.random() > 0.5) {
        const response = generateMixedPhrase(chatId) || "–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ —Ñ–æ—Ä–º–µ... ü§î";
        await ctx.reply(response);
    }
});

// üî• –°–û–•–†–ê–ù–ï–ù–ò–ï –ú–ï–î–ò–ê –ò–ó –°–û–û–ë–©–ï–ù–ò–ô
bot.on(["photo", "video", "sticker"], async (ctx) => {
    if (!isBotActive) return;
    
    const chatId = ctx.chat.id;
    const chatMemory = getChatMemory(chatId);
    
    try {
        if (ctx.message.photo) {
            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            const fileLink = await bot.telegram.getFileLink(photo.file_id);
            chatMemory.photos.push(fileLink.href);
        }
        else if (ctx.message.video) {
            const video = ctx.message.video;
            const fileLink = await bot.telegram.getFileLink(video.file_id);
            chatMemory.videos.push(fileLink.href);
        }
        else if (ctx.message.sticker) {
            chatMemory.stickers.push(ctx.message.sticker.file_id);
        }
        
        await saveMemory();
        await ctx.reply("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞:", error);
    }
});

// üî• –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
app.get('/', (req, res) => {
    res.send('ü§ñ –í–∏—Ç–∞–ª—è-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
loadMemory().then(() => {
    app.listen(PORT, () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
        console.log("üéÆ –ö–æ–º–∞–Ω–¥—ã: –í–∏—Ç–∞–ª—è –ø—Ä–æ—Å–Ω–∏—Å—å, –í–∏—Ç–∞–ª—è —É–π–¥–∏, uwu, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä");
    });
    
    bot.launch().then(() => {
        console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
    });
});

// üî• –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–ò –í–´–ö–õ–Æ–ß–ï–ù–ò–ò
process.once('SIGINT', async () => {
    await saveMemory();
    bot.stop('SIGINT');
});

process.once('SIGTERM', async () => {
    await saveMemory();
    bot.stop('SIGTERM');
});