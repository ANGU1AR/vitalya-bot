const { Telegraf } = require("telegraf");
const express = require('express');
const axios = require('axios');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const { loadMemory, saveMemory, getChatMemory } = require('./memoryManager');
const { sendRandomPhoto, sendRandomVideo, sendRandomSticker, addPhotoFromUrl, addVideoFromUrl, saveMediaFromMessage } = require('./mediaManager');
const { generateMixedPhrase } = require('./aiProcessor');
const { setupRemoteControl } = require('./remoteControl');
const gigachat = require('./gigachat');

const telegramToken = process.env.TELEGRAM_TOKEN;
const bot = new Telegraf(telegramToken);
const app = express();
const PORT = process.env.PORT || 3000;

let isBotActive = false;
let recentMessages = [];
let lastActivityTime = Date.now();
let photoTimer = null;
let chatHistory = [];

// üî• –î–û–ë–ê–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö–ò –î–õ–Ø –ë–ê–ë–£–®–ö–ò–ù–´–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
let messageCounter = 0;
let nextCommentAt = Math.floor(Math.random() * 5) + 1; // —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5

// üî• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initializeBot() {
    await loadMemory();
    console.log("üß† –ü–∞–º—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
}

// üî• –¢–∞–π–º–µ—Ä—ã
function startTimers(chatId) {
    if (photoTimer) clearInterval(photoTimer);
    
    // –¢–∞–π–º–µ—Ä –¥–ª—è –º–µ–¥–∏–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞, —É–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    photoTimer = setInterval(async () => {
        if (isBotActive && Date.now() - lastActivityTime < 3600000) {
            if (Math.random() > 0.8) {
                const chatMemory = getChatMemory(chatId);
                const mediaType = Math.random() > 0.5 ? 'photo' : 'video';
                
                if (mediaType === 'photo' && chatMemory.photos.length > 0) {
                    await sendRandomPhoto(bot, chatId, chatMemory);
                } else if (mediaType === 'video' && chatMemory.videos.length > 0) {
                    await sendRandomVideo(bot, chatId, chatMemory);
                } else if (chatMemory.stickers.length > 0) {
                    await sendRandomSticker(bot, chatId, chatMemory);
                }
            }
        }
    }, 300000);
}

// üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", async (ctx) => {
    try {
        const chatId = ctx.chat.id;
        const messageText = ctx.message.text;
        const lowerText = messageText.toLowerCase();
        
        // üî• –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
        messageCounter++;
        console.log(`üìä –°–æ–æ–±—â–µ–Ω–∏–µ ${messageCounter}/${nextCommentAt} –¥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è`);
        
        // üî• –ü–†–û–í–ï–†–Ø–ï–ú, –ù–ï –ü–û–†–ê –õ–ò –ë–ê–ë–£–®–ö–ï –í–°–¢–ê–í–ò–¢–¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô
        if (isBotActive && messageCounter >= nextCommentAt) {
            const comment = gigachat.getRandomComment();
            if (comment) {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
                setTimeout(async () => {
                    try {
                        await bot.telegram.sendMessage(chatId, comment);
                        console.log(`üëµ –ë–∞–±—É—à–∫–∞ –≤—Å—Ç–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ ${messageCounter} —Å–æ–æ–±—â–µ–Ω–∏–π`);
                    } catch (error) {
                        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", error.message);
                    }
                }, 2000 + Math.floor(Math.random() * 3000));
            }
            
            // üî• –°–ë–†–ê–°–´–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö –ò –ó–ê–î–ê–ï–ú –ù–û–í–û–ï –°–õ–£–ß–ê–ô–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï
            messageCounter = 0;
            nextCommentAt = Math.floor(Math.random() * 5) + 1; // –æ—Ç 1 –¥–æ 5
            console.log(`üéØ –°–ª–µ–¥—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ ${nextCommentAt} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chatHistory.push({
            role: 'user',
            content: messageText,
            timestamp: Date.now()
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if (chatHistory.length > 20) {
            chatHistory = chatHistory.slice(-20);
        }
        
        lastActivityTime = Date.now();
        
        // üî• –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø - –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–í–´–ú–ò!
        
        // –ö–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
        if (lowerText.includes('–≤–∏—Ç–∞–ª—è –ø—Ä–æ—Å–Ω–∏—Å—å') || lowerText.includes('–≤–∏—Ç–∞–ª—è –≤–∫–ª—é—á–∏—Å—å')) {
            if (!isBotActive) {
                isBotActive = true;
                const wakeUpPhrases = [
                    "–ï–ö–ê–¢–ï–†–ò–ù–ê –û–°–¢–ê–ù–û–í–ò–¢–ï–°–Ø –ù–ï –ë–ê–ù–¨–¢–ï –ú–ï–ù–Ø!!!"
                ];
                const phrase = wakeUpPhrases[Math.floor(Math.random() * wakeUpPhrases.length)];
                await ctx.reply(phrase);
                startTimers(chatId);
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                messageCounter = 0;
                nextCommentAt = Math.floor(Math.random() * 5) + 1;
            }
            return;
        }
        
        if (lowerText.includes('–≤–∏—Ç–∞–ª—è —É–π–¥–∏') || lowerText.includes('–≤–∏—Ç–∞–ª—è –≤—ã—Ä—É–±–∞–π')) {
            if (isBotActive) {
                isBotActive = false;
                const sleepPhrases = [
                    "–ê–π –º–ª—è! –ú–∞—Å–ª–∏–Ω—É –ø–æ–π–º–∞–ª! üòµ‚Äçüí´",
                    "–í–∏—Ç–∞–ª—è —É—Ö–æ–¥–∏—Ç –≤ –∑–∞–∫–∞—Ç! üåÖ",
                    "–û—Ç–∫–ª—é—á–∞—é—Å—å! üîå"
                ];
                const phrase = sleepPhrases[Math.floor(Math.random() * sleepPhrases.length)];
                await ctx.reply(phrase);
                if (photoTimer) clearInterval(photoTimer);
                await saveMemory();
            }
            return;
        }

        // –ö–æ–º–∞–Ω–¥–∞ UwU –¥–ª—è —Ñ–æ—Ç–æ
        if ((lowerText === 'uwu' || lowerText === '–≤–∏—Ç–∞–ª—è uwu') && isBotActive) {
            const chatMemory = getChatMemory(chatId);
            await sendRandomPhoto(bot, chatId, chatMemory);
            return;
        }

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–¥–µ–æ
        if ((lowerText === '–≤–∏–¥–µ–æ' || lowerText === '–≤–∏—Ç–∞–ª—è –≤–∏–¥–µ–æ') && isBotActive) {
            const chatMemory = getChatMemory(chatId);
            await sendRandomVideo(bot, chatId, chatMemory);
            return;
        }

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        if ((lowerText === '—Å—Ç–∏–∫–µ—Ä' || lowerText === '–≤–∏—Ç–∞–ª—è —Å—Ç–∏–∫–µ—Ä') && isBotActive) {
            const chatMemory = getChatMemory(chatId);
            await sendRandomSticker(bot, chatId, chatMemory);
            return;
        }

        // –ö–æ–º–∞–Ω–¥–∞ "–í–∏—Ç–∞–ª—è —Å—Ç–∞—Ç—É—Å"
        if ((lowerText === '–≤–∏—Ç–∞–ª—è —Å—Ç–∞—Ç—É—Å' || lowerText === '–≤–∏—Ç–∞–ª—è –≤—Ä–µ–º—è') && isBotActive) {
            const chatMemory = getChatMemory(chatId);
            const now = new Date();
            const stats = `üìä –°—Ç–∞—Ç—É—Å –í–∏—Ç–∞–ª–∏:
üïê –í—Ä–µ–º—è: ${now.toLocaleTimeString('ru-RU')}
üìÖ –î–∞—Ç–∞: ${now.toLocaleDateString('ru-RU')}
üí¨ –°–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏: ${chatMemory.words.size}
üìù –§—Ä–∞–∑ –≤ –ø–∞–º—è—Ç–∏: ${chatMemory.phrases.size}
üì∏ –§–æ—Ç–æ: ${chatMemory.photos.length}
üé• –í–∏–¥–µ–æ: ${chatMemory.videos.length}
üòä –°—Ç–∏–∫–µ—Ä–æ–≤: ${chatMemory.stickers.length}
üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${isBotActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–°–ø–∏—Ç'}
üì® –î–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${nextCommentAt - messageCounter} —Å–æ–æ–±—â.`;
            
            await ctx.reply(stats);
            return;
        }

        // –ö–æ–º–∞–Ω–¥–∞ "–í–∏—Ç–∞–ª—è —É—á–∏—Å—å"
        if ((lowerText === '–≤–∏—Ç–∞–ª—è —É—á–∏—Å—å' || lowerText === '–≤–∏—Ç–∞–ª—è –æ–±—É—á–∏—Å—å') && isBotActive) {
            await ctx.sendChatAction('typing');
            const learningResult = await gigachat.learnFromChat(chatHistory);
            
            if (learningResult) {
                await ctx.reply("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —è —Å—Ç–∞–ª —É–º–Ω–µ–µ! üß†");
            } else {
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ...");
            }
            return;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ URL
        if (lowerText.startsWith('–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ') && isBotActive) {
            const photoUrl = messageText.slice(13).trim();
            if (addPhotoFromUrl(chatId, photoUrl)) {
                await ctx.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é! üì∏");
            }
            return;
        }

        if (lowerText.startsWith('–¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ ') && isBotActive) {
            const videoUrl = messageText.slice(14).trim();
            if (addVideoFromUrl(chatId, videoUrl)) {
                await ctx.reply("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é! üé•");
            }
            return;
        }

        // üî• –û–¢–í–ï–¢ –ß–ï–†–ï–ó GIGACHAT (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞)
        if (isBotActive && (lowerText.startsWith('–≤–∏—Ç–∞–ª—è') || Math.random() > 0.7)) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞
            if (lowerText.includes('—Å—Ç–∞—Ç—É—Å') || lowerText.includes('–≤—Ä–µ–º—è') || 
                lowerText.includes('—É—á–∏—Å—å') || lowerText.includes('–æ–±—É—á–∏—Å—å')) {
                return;
            }
            
            const userMessage = lowerText.startsWith('–≤–∏—Ç–∞–ª—è') ? messageText.slice(7).trim() : messageText;
            
            if (userMessage) {
                await ctx.sendChatAction('typing');
                
                const response = await gigachat.sendMessage(userMessage, chatHistory);
                
                chatHistory.push({
                    role: 'assistant',
                    content: response,
                    timestamp: Date.now()
                });
                
                await ctx.reply(response);
            }
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
    }
});

// üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(["photo", "video", "sticker"], async (ctx) => {
    try {
        if (isBotActive) {
            const chatId = ctx.chat.id;
            const savedUrl = await saveMediaFromMessage(chatId, ctx);
            if (savedUrl) {
                await ctx.reply("–ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é! ‚úÖ");
            }
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞:", error.message);
    }
});

// Express –¥–ª—è Railway
app.get('/', (req, res) => {
    res.send('ü§ñ –í–∏—Ç–∞–ª—è-–±–æ—Ç —Å –±–∞–±—É—à–∫–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// üî• –ó–∞–ø—É—Å–∫
initializeBot().then(() => {
    app.listen(PORT, () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
    
    setupRemoteControl(bot);
    
    bot.launch().then(() => {
        console.log("ü§ñ –í–∏—Ç–∞–ª—è-–±–æ—Ç —Å –±–∞–±—É—à–∫–æ–π –∑–∞–ø—É—â–µ–Ω!");
    });
});

// Graceful shutdown
process.once('SIGINT', async () => {
    await saveMemory();
    bot.stop('SIGINT');
});

process.once('SIGTERM', async () => {
    await saveMemory();
    bot.stop('SIGTERM');
});